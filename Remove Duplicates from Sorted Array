/*
LeetCode Problem 26 - Remove Duplicates from Sorted Array
Difficulty: Easy

Problem:
Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. 
Return k â€” the number of unique elements. 
The first k elements of nums should hold the result in the same order.

Example:
Input:  nums = [0,0,1,1,1,2,2,3,3,4]
Output: 5
Explanation: The first 5 elements of nums are [0,1,2,3,4]

Constraints:
- 1 <= nums.length <= 3 * 10^4
- -100 <= nums[i] <= 100
- nums is sorted in non-decreasing order.

Time Complexity: O(n)
Space Complexity: O(1)
*/

#include <vector>
using namespace std;

class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        int n = nums.size();
        int i = 0;

        for (int j = 1; j < n; j++) {
            if (nums[j] != nums[i]) {
                swap(nums[i + 1], nums[j]);
                i++;
            }
        }

        return i + 1;
    }
};

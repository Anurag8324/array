/*
LeetCode Problem 1 - Two Sum
Difficulty: Easy

Problem:
Given an array of integers nums and an integer target,
return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution,
and you may not use the same element twice.

You can return the answer in any order.

Example 1:
Input:  nums = [2, 7, 11, 15], target = 9
Output: [0, 1]

Example 2:
Input:  nums = [3, 2, 4], target = 6
Output: [1, 2]

Example 3:
Input:  nums = [3, 3], target = 6
Output: [0, 1]

Constraints:
- 2 <= nums.length <= 10^4
- -10^9 <= nums[i] <= 10^9
- Only one valid answer exists.

Approach:
Use a hash map to store seen values and their indices.
For each element, check if the complement (target - current) exists in the map.

Time Complexity:  O(n)
Space Complexity: O(n)
*/

#include <vector>
#include <map>
using namespace std;

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        int n = nums.size();
        map<int, int> mpp;

        for (int i = 0; i < n; i++) {
            int num = nums[i];
            int more = target - num;

            if (mpp.find(more) != mpp.end()) {
                return {i, mpp[more]};
            }

            mpp[num] = i;
        }

        return {-1, -1}; // Should never reach here if one valid answer exists
    }
};
